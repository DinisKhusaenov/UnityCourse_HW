//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Health"",
            ""id"": ""a479afcb-7ac9-49d0-8326-63f5bbc64a57"",
            ""actions"": [
                {
                    ""name"": ""Add"",
                    ""type"": ""Button"",
                    ""id"": ""3375bacb-6943-47b2-b748-d742ce945fca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reduce"",
                    ""type"": ""Button"",
                    ""id"": ""4483f761-c48f-4d48-bd92-55e55b60f313"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d6bd624-3566-48c1-b1c2-4f9b3276dcc8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Add"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cad618f-f154-4515-8f11-dc2bc0c3f920"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reduce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Level"",
            ""id"": ""2cc84263-2d81-4ad8-be24-581f244dd3dd"",
            ""actions"": [
                {
                    ""name"": ""Increase"",
                    ""type"": ""Button"",
                    ""id"": ""e1f83ec1-ebbf-4dad-9225-32adbd1cac73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89a705b0-0c94-4e08-96bf-e2975bdcf45b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Increase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Health
        m_Health = asset.FindActionMap("Health", throwIfNotFound: true);
        m_Health_Add = m_Health.FindAction("Add", throwIfNotFound: true);
        m_Health_Reduce = m_Health.FindAction("Reduce", throwIfNotFound: true);
        // Level
        m_Level = asset.FindActionMap("Level", throwIfNotFound: true);
        m_Level_Increase = m_Level.FindAction("Increase", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Health
    private readonly InputActionMap m_Health;
    private List<IHealthActions> m_HealthActionsCallbackInterfaces = new List<IHealthActions>();
    private readonly InputAction m_Health_Add;
    private readonly InputAction m_Health_Reduce;
    public struct HealthActions
    {
        private @PlayerInput m_Wrapper;
        public HealthActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Add => m_Wrapper.m_Health_Add;
        public InputAction @Reduce => m_Wrapper.m_Health_Reduce;
        public InputActionMap Get() { return m_Wrapper.m_Health; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HealthActions set) { return set.Get(); }
        public void AddCallbacks(IHealthActions instance)
        {
            if (instance == null || m_Wrapper.m_HealthActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HealthActionsCallbackInterfaces.Add(instance);
            @Add.started += instance.OnAdd;
            @Add.performed += instance.OnAdd;
            @Add.canceled += instance.OnAdd;
            @Reduce.started += instance.OnReduce;
            @Reduce.performed += instance.OnReduce;
            @Reduce.canceled += instance.OnReduce;
        }

        private void UnregisterCallbacks(IHealthActions instance)
        {
            @Add.started -= instance.OnAdd;
            @Add.performed -= instance.OnAdd;
            @Add.canceled -= instance.OnAdd;
            @Reduce.started -= instance.OnReduce;
            @Reduce.performed -= instance.OnReduce;
            @Reduce.canceled -= instance.OnReduce;
        }

        public void RemoveCallbacks(IHealthActions instance)
        {
            if (m_Wrapper.m_HealthActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHealthActions instance)
        {
            foreach (var item in m_Wrapper.m_HealthActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HealthActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HealthActions @Health => new HealthActions(this);

    // Level
    private readonly InputActionMap m_Level;
    private List<ILevelActions> m_LevelActionsCallbackInterfaces = new List<ILevelActions>();
    private readonly InputAction m_Level_Increase;
    public struct LevelActions
    {
        private @PlayerInput m_Wrapper;
        public LevelActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Increase => m_Wrapper.m_Level_Increase;
        public InputActionMap Get() { return m_Wrapper.m_Level; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelActions set) { return set.Get(); }
        public void AddCallbacks(ILevelActions instance)
        {
            if (instance == null || m_Wrapper.m_LevelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LevelActionsCallbackInterfaces.Add(instance);
            @Increase.started += instance.OnIncrease;
            @Increase.performed += instance.OnIncrease;
            @Increase.canceled += instance.OnIncrease;
        }

        private void UnregisterCallbacks(ILevelActions instance)
        {
            @Increase.started -= instance.OnIncrease;
            @Increase.performed -= instance.OnIncrease;
            @Increase.canceled -= instance.OnIncrease;
        }

        public void RemoveCallbacks(ILevelActions instance)
        {
            if (m_Wrapper.m_LevelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILevelActions instance)
        {
            foreach (var item in m_Wrapper.m_LevelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LevelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LevelActions @Level => new LevelActions(this);
    public interface IHealthActions
    {
        void OnAdd(InputAction.CallbackContext context);
        void OnReduce(InputAction.CallbackContext context);
    }
    public interface ILevelActions
    {
        void OnIncrease(InputAction.CallbackContext context);
    }
}
